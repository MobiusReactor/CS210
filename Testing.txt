Compiling: 

Works fine, if -Wall and -pedantic are enabled it warns about several mixed declarations and c++ style comments, can be fixed easily if needed

Stage 1: 
Need: Prompt user and parse input, able to exit shell with exit/cntrl d
Testing:
	Display prompt: Works and displays fine
	Empty line: Works fine, displays the next line.
	Input string too long: Works fine, displays "file name too long" error msg
	Series of spaces "      ": SEG FAULT - FIX THIS
	Series of > ">>>>>>>": SEG FAULT
	Characters which seg fault:  |><&;\t\n all the seperation characters if any seperation characters are input without data it seg faults
	Exit on exit: Works fine
	Exit on cntrl d: Works fine

Stage 2:
Need: Execute external commands
Testing:
	Input "ls": Works fine, displays "current working directory" properly
	Executing shell within the shell: Works fine, exiting from the inner shell safely puts you back to the outer shell
	Invalid program "aaaa": Safely displays error message and allows further input

Stage 3: 
Need: getenv/setenv and home
Testing:
	Restore original path: Works fine, prints the path at the start and restores it at the end
	ls and shell execution: Works fine, just need to navigate to the current directory the shell is in instead
	CHanging the path and executing commands: Works fine i think, doesn't execute system commands when the path isn't what it should be
	Incorrect parameters: Works fine, safely prints error message

Stage 4: 
Need: cd/pwd and ls, do they all work correctly
Testing:
	cd relative path "cd Desktop": Works fine
	cd absolute path "cd /home/declan/Desktop": Works fine
	pwd and ls: Both output the correct/expected output
	Error handing: Works fine

Stage 5:
Need: FIle history maintained correctly, circular array working, history invocations
Testing: 
	History maintainanence: typing history correctly displays the list of commands last input
	Circular array: Correctly shuffles all elements up
	History invocations: Successfully runs the command but does not add the command to the history (dunno if it should or not)
	Invalid input: Handles all invalid input fine

Stage 6: 
Need: Persistant history
Testing:
	Loading history: Works fine, typing history after startup correctly displays the last history
	Saving history: Also works fine
	FIle not found: Even deleting the file from within the shell and then exiting works fine. If it tries to load it it just displays "no such file" then creates it.

Stage 7:
Need: Alias with/without params, built in and computer, each exec correctly and alias max
	Alias list: Works fine but should print a small message when alias list is empty
	Alias with and without: All work fine and exec correctly, even when the alias is supplemented with extra arguments like "alias potato ls" then "potato -l"
	Alias max: Works fine
	Small bug: Doing "alias alias ls" makes the alias command not work, can't add/list alias until alias is removed using "unalias" (not sure if this is intentional or not)
	Alias error handling: Works fine but unalias command should print a message of confirmation like "'command' has been removed." since right now there is no feedback

Stage 8: 
Need: Cyclic alias
	Alias series without cycles and params: Works fine (alias a1 a2, alias a2 a3, alias a3 ls, ran a1, ran a1 -lhF)
	Alias series without cycles but with params: Works fine (alias a1 a2, alias a2 a3 -lhF, alias a3 ls, ran a1)
	Alias series with history: Works fine (alias sixteen !16, item 16 in history are ls)
	Alias series with history and params: Works fine (alias lsextra !16 -lhF, item 16 is ls) 
	Alias series with cycles: Aborts correctly when command already ran found
	Alias series with cycles and params: Works fine (put alias into history then ran alias b1 !17 b2 b1 then ran b2 and b1, replaced the aliases until a loop occurred)

Summary:

All in all it works fine bar the seg fault from parsing a series of seperation characters and sometimes not providing user feedback for aliases.
	







